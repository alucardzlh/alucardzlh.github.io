{"__ud_title":"Effective Java 阅读笔记","__ud_tags":["Effective","java"],"__ud_update_time":1738653892903,"__ud_create_time":1738653891293,"__ud_draft":false,"type":"doc","content":[{"type":"heading","attrs":{"level":1,"id":null},"content":[{"type":"text","text":"Effective Java 阅读笔记"}]},{"type":"paragraph"},{"type":"image","attrs":{"src":"/post-assets/m6q5mwgt-v2-ff22dd232313abf63ed5a0fb09f6a9b8_1440w.png","alt":"v2-ff22dd232313abf63ed5a0fb09f6a9b8_1440w.png","title":null}},{"type":"orderedList","attrs":{"start":1},"content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"build模式"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"通过构造器注入类，进行调用,而不是在内部直接创建类使用。"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"重用对象，   通过 static final 缓存昂贵实例  比如正则。"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"自动拆装箱 互转 会耗损更多性能 比如混用int 和integer。"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"轻量对象不要使用对象池"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"通过有效期、缓存大小、软弱引用来解决不能被GC释放的内存  weakHashMap"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"使用try with Resource"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Camparator  多参数数据排序   自反性 对称性 传递性 一致性  空"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"组合优于继承，接口优于抽象类   bird extends  animal  "}]},{"type":"paragraph","content":[{"type":"text","text":"bird总是拥有fly  animal又没有fly   导致基类庞大，子类多未使用方法"}]},{"type":"paragraph","content":[{"type":"text","text":"问题：企鹅是鸟但不会飞，蝙蝠不是鸟但又需要飞，"}]},{"type":"paragraph","content":[{"type":"text","text":"将fly能力作为一个组件对象 放到animal中 作为成员域  可选 并添加set方法"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":" 基于接口->抽象类->实现类  完成骨架实现。 公共逻辑或成员域写在抽象类层"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"用抽象类和抽象方法  类层次的方法，解决类中的if-else 标签类"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"基于11再递进，把具体行为抽象为接口，每个动物实例去实现它重写接口内执行方法。然后用animal去注入具体行为接口在类内硬重写方法调用行为接口内的方法。"}]}]}]}]}