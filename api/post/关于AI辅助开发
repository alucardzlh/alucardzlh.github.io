{"content":"{\"__ud_title\":\"关于AI辅助开发\",\"__ud_tags\":[],\"__ud_update_time\":1738516581707,\"__ud_create_time\":1738516580469,\"__ud_draft\":false,\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"关于AI辅助开发\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"1. 插件化\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"        AI辅助编程目前可行性以及落地能力最强的是IDE开发工具的插件化，开发者几乎0成本集成。\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"2. 交互形式\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"        我了解目前三种;一是IDE自动提示补全，二是prompt问答交互，三是生成项目级代码。前两种商业场景用得相对较多。\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"3. 模型选型很关键\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"        一般我们要写个递归或者复杂数据结构转换的情况下就会用prompt交互获取代码片段。之前用得最多的通义灵码以及copilot生成的代码直接运行都是会有很多问题。需要反复的prompt交互修改，甚至多个模型跳跃反复尝试，或者自己去找到其中的问题修正才能形成工业级代码。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"        我们需要更多的尝试定位错误率较低或专门用于编码的模型，类比于专门用于推理的deepseek模型，等deepseek开放了API或插件可以多尝试用推理模型生产代码。\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"4. prompt\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"        提示词文本交互很费时间，其实就是一丝不苟的语言精炼归纳能力。现在甚至出现了prompt工程师这个职位。跟AI沟通也好也不好，尤其是需要生成代码的时候必须尽可能的严谨。引用个段子，帮我去菜场买5个包子，看下有没有西瓜，如果有就买1个。如果这么写提示词AI可能就给你生成一个包子。\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"5. 有效范围\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"        目前体验最好的就是AI自动补全代码，可以避免敲一些重复的代码。其次就是一些业务设计问题可以打开一些思路。最次就是prompt生产复杂逻辑代码，然后花大量时间去修正。\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":null},\"content\":[{\"type\":\"text\",\"text\":\"总结：\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"        现阶段AI辅助提高编码效率及解决一些问题上是有帮助的。但绝不像大部分引流公众号标题党吹得那么神乎其神。还有两种常见引流标题，一种是“AI即将替代初级程序员”，这种圈内都聊烂了，大概率没写过商业代码的自媒体；另一种是“一天时间用cursor生成了一个某APP”，这种也纯粹为了引流。标题至少得“一天时间用cursor生产某APP并通过AppStore审核上架”，最好一个月后产生流水日活受市场认可。\"}]},{\"type\":\"paragraph\"}]}","title":"关于AI辅助开发","tags":[],"updateTime":1738516581707,"createTime":1738516580469,"draft":false,"intro":"","html":"<h1 level=\"1\" id=\"关于AI辅助开发\">关于AI辅助开发</h1><p></p><h2 level=\"2\" id=\"1-插件化\">1. 插件化</h2><p>        AI辅助编程目前可行性以及落地能力最强的是IDE开发工具的插件化，开发者几乎0成本集成。</p><p></p><h2 level=\"2\" id=\"2-交互形式\">2. 交互形式</h2><p>        我了解目前三种;一是IDE自动提示补全，二是prompt问答交互，三是生成项目级代码。前两种商业场景用得相对较多。</p><p></p><h2 level=\"2\" id=\"3-模型选型很关键\">3. 模型选型很关键</h2><p>        一般我们要写个递归或者复杂数据结构转换的情况下就会用prompt交互获取代码片段。之前用得最多的通义灵码以及copilot生成的代码直接运行都是会有很多问题。需要反复的prompt交互修改，甚至多个模型跳跃反复尝试，或者自己去找到其中的问题修正才能形成工业级代码。</p><p>        我们需要更多的尝试定位错误率较低或专门用于编码的模型，类比于专门用于推理的deepseek模型，等deepseek开放了API或插件可以多尝试用推理模型生产代码。</p><p></p><h2 level=\"2\" id=\"4-prompt\">4. prompt</h2><p>        提示词文本交互很费时间，其实就是一丝不苟的语言精炼归纳能力。现在甚至出现了prompt工程师这个职位。跟AI沟通也好也不好，尤其是需要生成代码的时候必须尽可能的严谨。引用个段子，帮我去菜场买5个包子，看下有没有西瓜，如果有就买1个。如果这么写提示词AI可能就给你生成一个包子。</p><p></p><h2 level=\"2\" id=\"5-有效范围\">5. 有效范围</h2><p>        目前体验最好的就是AI自动补全代码，可以避免敲一些重复的代码。其次就是一些业务设计问题可以打开一些思路。最次就是prompt生产复杂逻辑代码，然后花大量时间去修正。</p><p></p><h2 level=\"2\" id=\"总结\">总结：</h2><p>        现阶段AI辅助提高编码效率及解决一些问题上是有帮助的。但绝不像大部分引流公众号标题党吹得那么神乎其神。还有两种常见引流标题，一种是“AI即将替代初级程序员”，这种圈内都聊烂了，大概率没写过商业代码的自媒体；另一种是“一天时间用cursor生成了一个某APP”，这种也纯粹为了引流。标题至少得“一天时间用cursor生产某APP并通过AppStore审核上架”，最好一个月后产生流水日活受市场认可。</p><p></p><script type=\"module\">const injectHtml = (root, html) => {\n  const iframe = document.createElement(\"iframe\");\n  const htmlContent = `<html><head></head><body>${html}</body></html>`;\n  iframe.style.width = \"100%\";\n  iframe.style.height = \"100%\";\n  iframe.onload = () => {\n    const doc = iframe.contentDocument || iframe.contentWindow?.document;\n    if (!doc) {\n      return;\n    }\n    doc.open();\n    doc.write(htmlContent);\n    doc.close();\n  };\n  root.replaceChildren(iframe);\n}\n  document.querySelectorAll('.playground')?.forEach(el=>{\n    const html = el.getAttribute('data-html');\n    if (html) {\n      injectHtml(el,html);\n    }\n    const indicator = document.createElement(\"div\");\n    indicator.className = \"indicator\";\n    const showCode = document.createElement(\"div\");\n    showCode.className = \"show-code\";\n    showCode.innerText = \"code\";\n    showCode.onclick = () => {\n      el.parentElement.classList.remove(\"preview-only\");\n    };\n    const showPreview = document.createElement(\"div\");\n    showPreview.className = \"show-preview\";\n    showPreview.innerText = \"preview\";\n    showPreview.onclick = () => {\n      el.parentElement.classList.add(\"preview-only\");\n    };\n    indicator.appendChild(showCode);\n    indicator.appendChild(showPreview);\n    el.parentElement.appendChild(indicator);\n    if (window.screen.width < 768) {\n      showPreview.click();\n    }\n  });</script>","id":"关于AI辅助开发","path":"/posts/关于AI辅助开发.json"}